<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Blocky Python Code</title>
</head>
<body>
<pre>
import pygame#pyjsdl as pygame
#import pyjsdl as pygame 



class Digit:
    
    def __init__(self, val):
        """Digit is an object representing the val th digit of PI.
        key parameter is the keyboard key representing the val th digit of PI"""
        
        def piDig(k):
            file = open('pi.txt', 'r')
            file.seek(1+(k))
            dig=file.read(1)
            file.close()
            return ((dig))
       
        self.val=piDig(int(val))
        
        if (int(self.val)==0):
            self.key=pygame.K_0
        elif (int(self.val)==1):
            self.key=pygame.K_1
        elif (int(self.val)==2):
            self.key=pygame.K_2
        elif (int(self.val)==3):
            self.key=pygame.K_3         
        elif (int(self.val)==4):
            self.key=pygame.K_4
        elif (int(self.val)==5):
            self.key=pygame.K_5
        elif (int(self.val)==6):
            self.key=pygame.K_6
        elif (int(self.val)==7):
            self.key=pygame.K_7           
        elif (int(self.val)==8):
            self.key=pygame.K_8
        elif (int(self.val)==9):
            self.key=pygame.K_9
        else:
            self.key="error"
            print ("there's a cock up")
            
        if (int(self.val)==0):
            self.key_num=pygame.K_KP0
        elif (int(self.val)==1):
            self.key_num=pygame.K_KP1
        elif (int(self.val)==2):
            self.key_num=pygame.K_KP2
        elif (int(self.val)==3):
            self.key_num=pygame.K_KP3         
        elif (int(self.val)==4):
            self.key_num=pygame.K_KP4
        elif (int(self.val)==5):
            self.key_num=pygame.K_KP5
        elif (int(self.val)==6):
            self.key_num=pygame.K_KP6
        elif (int(self.val)==7):
            self.key_num=pygame.K_KP7           
        elif (int(self.val)==8):
            self.key_num=pygame.K_KP8
        elif (int(self.val)==9):
            self.key_num=pygame.K_KP9
        else:
            self.key_num="error"
            print ("there's a cock up")
            
            
            
            
class Counter:
    def __init__(self):
        self.alive=True
        
    
    def getCount(self):
        return self.n
        
        
    def setCount(self,x):
        self.n=int(x)
        
    def incCount(self):
        self.n=int(self.n) + 1

def floor(n):
    return (n - (n % 1))

def Matrixform(N, line_size, line_num):
    k=N # total number of digs to be printed 
    x=line_size # number of digits per line
    l= line_num #number of lines before scrolling 
    y=int(floor(k/x))
    row=[]
    final_row=[]
    matrix=[]
    for q in range (0,y):
        for i in range (1,x+1):
            row.append(Digit(int(i+x*(q))).val)
        
        matrix.append(row)
        row=[]

    if (k%x !=0 ):
       
        for f in range (y*x, k):
            final_row.append(Digit(f+1).val)
            
        matrix.append(final_row)

    while len(matrix) > line_num:
        matrix.pop(0)
    return (matrix)


def toString( Matrix_row):
    numbers=''
    
    for element in Matrix_row:
        numbers=numbers+element
    return numbers



def write(msg,fontObj):
        #global fontObj
        fontCol=(99,99,99)
        mytext = fontObj.render(msg, True,fontCol )
        mytext = mytext.convert_alpha()
        return mytext

def writeRed(msg,fontObj):
    #global fontObj
    font_colour=(255,0,0)
    mytext = fontObj.render(msg, True,font_colour )
    mytext = mytext.convert_alpha()
    return mytext

def toScreen(N, line_size, line_num,redLastNum):
            num_width, num_height = fontObj.size(("8"))
            text_height=60
            text_width=118
            nums=(Matrixform(N,line_size,line_num))
            
            
            
            last_txt=writeRed((str(Digit(N+1).val)), fontObj)
            y=30
            x=text_width+40
            for row in nums:
            
                numbers=write(toString(row),fontObj)
                screen.blit(numbers, (x,y))
                y=y+text_height
             
            if redLastNum==True:#pygame.display.flip()
                w,h=fontObj.size(str(nums[len(nums)-1]))             
                screen.blit(last_txt, (x+num_width*len(nums[-1]),y-text_height))
                #screen.blit(last_txt, (w+x,y-text_height))
            
def gameOver(finalScore):
    toScreen(finalScore, line_len, line_num,True)
    pygame.display.flip()
    pygame.time.delay(1000)
    global hiscore
    if finalScore> hiscore:
        hiscore=finalScore
        

def displayHiScore():
    screen.blit(write("HiScore= " +str(hiscore),fontObj), (100,300))
    pygame.display.flip()

def reset():
    screen.blit(background, (0,0)) # clean whole screen
    linefirst=write(u"\u03C0"+"=3.", fontObj)
    screen.blit(linefirst, (x,y))
    n.setCount(1)
    pygame.display.flip()
    

  
def setup():
    global n,x,y, line_num, line_len,screen,background,hiscore
    hiscore=0
    n=Counter()    
    pygame.init()

    x= 40 # positions of text in window 
    y = 30
    line_num=4 # number of lines on screen before scrolling
    line_len=4 # number of digits in one line
         
    screen = pygame.display.set_mode((760,400))
    background = pygame.Surface((screen.get_width(), screen.get_height()))
    background.fill((255,255,255)) # white
    background = background.convert()
    screen.blit(background, (0,0)) # clean whole screen
    pygame.display.set_caption("Press h for HiScore")
    
    FPS = 30 # desired framerate in frames per second.
    ##choose font, size etc 
    global fontObj,font_colour
    pygame.font.init()
    font_path = "./KGLifeisMessy.ttf"
    font_size = 80
    font_colour=(99,99,99)
    fontObj = pygame.font.SysFont("none", font_size)
    linefirst=write(u"\u03C0"+"=3.", fontObj)
    screen.blit(linefirst, (x,y))
    n.setCount(1)
    pygame.display.flip()
    
    
    
def run():
    pygame.event.pump()
    key1=Digit(n.getCount()).key
    key2=Digit(n.getCount()).key_num
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit() # pygame window closed by user
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
                
            if event.key== pygame.K_h:
                displayHiScore()
        if event.type == pygame.KEYUP:
                
            if event.key == key1 or event.key== key2 and event.key!=pygame.K_RETURN:
                
                if (n.getCount() > line_num*line_len):
                    screen.blit(background,(0,0))
                    toScreen((n.getCount()), line_len, line_num,False)
                    n.incCount()
                else:   
                    toScreen((n.getCount()), line_len, line_num,False)
                    n.incCount()
                        
        if event.type ==pygame.KEYDOWN:
            
            if event.key != key1 and event.key !=pygame.K_ESCAPE and event.key !=key2 and event.key != pygame.K_h:
                
                pygame.event.clear(pygame.KEYDOWN)
                final_score=n.getCount()-1
                n.setCount(1)
                if final_score==0: #if wrong on1st digit 
                    
                    one=writeRed("1", fontObj)
                    screen.blit(one, (118+40,y))
                    pygame.display.flip()
                    pygame.time.delay(1000)
                    reset()
                else:
                    gameOver(final_score)
                    reset()
                   
        pygame.display.flip()




setup()
main=True
while main:
    run()
#pygame.display.setup(run) 



</pre>
</body>
</html>
